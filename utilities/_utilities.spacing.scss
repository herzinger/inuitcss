/* ==========================================================================
   #SPACING
   ========================================================================== */

/**
 * Utility classes to put specific spacing values onto elements. The below loop
 * will generate us a suite of classes like:
 *
 *   .u-margin-top {}
 *   .u-padding-left-large {}
 *   .u-margin-right-small {}
 *   .u-padding {}
 *   .u-padding-right-none {}
 *   .u-padding-horizontal {}
 *   .u-padding-vertical-small {}
 */





// Optionally, inuitcss can generate responsive versions of this classes.
// Would you like to generate these types of class as well? E.g.:
//
//   .u-padding-large@desktop
//   .u-padding-tiny@mobile
//   .u-margin-huge@tablet
//   .u-margin-none@wide

$inuit-responsive-spacing: false !default;





/* stylelint-disable string-quotes */

// Furthermore, you can choose to generate responsive versions of only
// a specific set of classes, by predefining this config map:

$inuit-responsive-spacing-config: (
  properties: 'padding' 'margin',
  directions: '-top' '-right' '-bottom' '-left' '-horizontal' '-vertical',
  sizes: null '-tiny' '-small' '-large' '-huge' '-none'
) !default;





// When using Sass-MQ, this defines the separator for the breakpoints suffix
// in the class name. By default, we are generating the responsive suffixes
// for the classes with a `@` symbol so you get classes like:
// 
// u-padding@mobile
// u-margin-tiny@desktop

$inuit-spacing-breakpoint-separator: \@ !default;





$inuit-spacing-directions: (
  null: null,
  '-top': '-top',
  '-right': '-right',
  '-bottom': '-bottom',
  '-left': '-left',
  '-horizontal': '-left' '-right',
  '-vertical': '-top' '-bottom',
) !default;


$inuit-spacing-properties: (
  'padding': 'padding',
  'margin': 'margin',
) !default;


$inuit-spacing-sizes: (
  null: $inuit-global-spacing-unit,
  '-tiny': $inuit-global-spacing-unit-tiny,
  '-small': $inuit-global-spacing-unit-small,
  '-large': $inuit-global-spacing-unit-large,
  '-huge': $inuit-global-spacing-unit-huge,
  '-none': 0
) !default;





@mixin inuit-spacing() {

  @include inuit-spacing-properties($inuit-spacing-properties);

}


@mixin inuit-spacing-properties($properties) {

  @each $property-namespace, $property in $properties {
    @include inuit-spacing-directions($property, $inuit-spacing-directions);
  }

}


@mixin inuit-spacing-directions($property, $directions) {

  @each $direction, $direction-rules in $directions {
    @include inuit-spacing-sizes($property, $direction, $direction-rules, $inuit-spacing-sizes);
  }

}


@mixin inuit-spacing-sizes($property, $direction, $direction-rules, $sizes) {

  @each $size, $size-namespace in $sizes {
    @include inuit-spacing-class($property, $direction, $direction-rules, $size);
  }

}


@mixin inuit-spacing-class($property, $direction, $direction-rules, $size, $breakpoint: null) {

  .u-#{$property}#{$direction}#{$size}#{$breakpoint} {

    @each $rule in $direction-rules {
      #{$property}#{$rule}: map-get($inuit-spacing-sizes, $size) !important;
    }

  }

  $has-responsive: false;

  $responsive-property: index(map-get($inuit-responsive-spacing-config, properties), $property);
  $responsive-direction: index(map-get($inuit-responsive-spacing-config, directions), $direction);
  $responsive-size: index(map-get($inuit-responsive-spacing-config, sizes), $size);

  @if ($inuit-responsive-spacing == true and $responsive-property and $responsive-direction and $responsive-size) {

    $has-responsive: true;

  }


  @if (variable-exists(mq-breakpoints) and $breakpoint == null and $has-responsive) {

    @include inuit-spacing-responsive($property, $direction, $direction-rules, $size);

  }

}


@mixin inuit-spacing-responsive($property, $direction, $direction-rules, $size) {

  @each $inuit-bp-name, $inuit-bp-value in $mq-breakpoints {

    @include mq($from: $inuit-bp-name) {

      @include inuit-spacing-class($property, $direction, $direction-rules, $size, #{$inuit-spacing-breakpoint-separator}#{$inuit-bp-name});

    }

  }

}


@include inuit-spacing();

/* stylelint-enable string-quotes */
