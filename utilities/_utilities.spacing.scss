/* ==========================================================================
   #SPACING
   ========================================================================== */

/**
 * Utility classes to put specific spacing values onto elements. The below loop
 * will generate us a suite of classes like:
 *
 *   .u-margin-top {}
 *   .u-padding-left-large {}
 *   .u-margin-right-small {}
 *   .u-padding {}
 *   .u-padding-right-none {}
 *   .u-padding-horizontal {}
 *   .u-padding-vertical-small {}
 */





// Optionally, inuitcss can generate responsive versions of this classes.
// Would you like to generate these types of class as well? E.g.:
//
//   .u-padding-large@desktop
//   .u-padding-tiny@mobile
//   .u-margin-huge@tablet
//   .u-margin-none@wide

$inuit-responsive-spacing: false !default;





// Furthermore, you can choose to generate responsive versions of only
// a specific set of classes, by predefining this config map:

$inuit-responsive-spacing-config : (
  properties: 'padding' 'margin',
  directions: '-top' '-right' '-bottom' '-left' '-horizontal' '-vertical',
  sizes: null '-tiny' '-small' '-large' '-huge' '-none'
) !default;





// When using Sass-MQ, this defines the separator for the breakpoints suffix
// in the class name. By default, we are generating the responsive suffixes
// for the classes with a `@` symbol so you get classes like:
// 
// u-padding@mobile
// u-margin-tiny@desktop

$inuit-spacing-breakpoint-separator: \@ !default;





/* stylelint-disable string-quotes */

$inuit-spacing-directions: (
  null: null,
  '-top': '-top',
  '-right': '-right',
  '-bottom': '-bottom',
  '-left': '-left',
  '-horizontal': '-left' '-right',
  '-vertical': '-top' '-bottom',
) !default;


$inuit-spacing-properties: (
  'padding': 'padding',
  'margin': 'margin',
) !default;


$inuit-spacing-sizes: (
  null: $inuit-global-spacing-unit,
  '-tiny': $inuit-global-spacing-unit-tiny,
  '-small': $inuit-global-spacing-unit-small,
  '-large': $inuit-global-spacing-unit-large,
  '-huge': $inuit-global-spacing-unit-huge,
  '-none': 0
) !default;





@each $property-namespace, $property in $inuit-spacing-properties {

  @each $direction-namespace, $direction-rules in $inuit-spacing-directions {

    @each $size-namespace, $size in $inuit-spacing-sizes {

      .u-#{$property-namespace}#{$direction-namespace}#{$size-namespace} {

        @each $direction in $direction-rules {
          #{$property}#{$direction}: $size !important;
        }

      }


      @if (variable-exists(mq-breakpoints) and $inuit-responsive-spacing == true) {
        
        @if (
          index(map-get($inuit-responsive-spacing-config, properties), $property-namespace) and
          index(map-get($inuit-responsive-spacing-config, directions), $direction-namespace) and
          index(map-get($inuit-responsive-spacing-config, sizes), $size-namespace)
        ) {
          
          @each $inuit-bp-name, $inuit-bp-value in $mq-breakpoints {
      
            @include mq($from: $inuit-bp-name) {
              
              .u-#{$property-namespace}#{$direction-namespace}#{$size-namespace}#{$inuit-spacing-breakpoint-separator}#{$inuit-bp-name} {

                @each $direction in $direction-rules {
                  #{$property}#{$direction}: $size !important;
                }
        
              }
              
            }
        
          } 
          
        }
      
      }

    }

  }

}

/* stylelint-enable string-quotes */
